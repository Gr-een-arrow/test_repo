using NUnit.Framework;using System;using System.Net;using System.Net.Http;using System.Text;using System.Threading.Tasks;using Newtonsoft.Json;[TestFixture]public class AirShoppingTests{private HttpClient _client;[SetUp]public void Setup(){_client = new HttpClient { BaseAddress = new Uri("https://api.example.com") };}[Test]public async Task TC_001_ValidRoundTripSearch_ShouldReturnFlightOffers(){var request = new{OriginDestCriteria = new[]{new{OriginDepCriteria = new { IATA_LocationCode = "LHR", Date = "2025-05-07" },DestArrivalCriteria = new { IATA_LocationCode = "JNB" }},new{OriginDepCriteria = new { IATA_LocationCode = "JNB", Date = "2025-05-14" },DestArrivalCriteria = new { IATA_LocationCode = "LHR" }}},CabinType = new[]{new { CabinTypeCode = "5", PrefLevelCode = "Required" }}};var response = await _client.PostAsync("/AirShoppingRQ", new StringContent(JsonConvert.SerializeObject(request), Encoding.UTF8, "application/json"));Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);var content = await response.Content.ReadAsStringAsync();dynamic result = JsonConvert.DeserializeObject(content);Assert.IsTrue(result.FlightOffers.Count > 0);}[TearDown]public void Teardown(){_client?.Dispose();}}

using NUnit.Framework;using System;using System.Net;using System.Net.Http;using System.Text;using System.Threading.Tasks;using Newtonsoft.Json;[TestFixture]public class AirShoppingTests{private HttpClient _client;[SetUp]public void Setup(){_client = new HttpClient { BaseAddress = new Uri("https://api.example.com") };}[Test]public async Task TC_002_ValidOneWaySearch_ShouldReturnFlightOffers(){var request = new{OriginDestCriteria = new[]{new{OriginDepCriteria = new { IATA_LocationCode = "LAX", Date = "2025-06-01" },DestArrivalCriteria = new { IATA_LocationCode = "NYC" }}},CabinType = new[]{new { CabinTypeCode = "5", PrefLevelCode = "Required" }}};var response = await _client.PostAsync("/AirShoppingRQ", new StringContent(JsonConvert.SerializeObject(request), Encoding.UTF8, "application/json"));Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);var content = await response.Content.ReadAsStringAsync();dynamic result = JsonConvert.DeserializeObject(content);Assert.IsTrue(result.FlightOffers.Count > 0);}[TearDown]public void Teardown(){_client?.Dispose();}}

using NUnit.Framework;using System;using System.Net;using System.Net.Http;using System.Text;using System.Threading.Tasks;using Newtonsoft.Json;[TestFixture]public class AirShoppingTests{private HttpClient _client;[SetUp]public void Setup(){_client = new HttpClient { BaseAddress = new Uri("https://api.example.com") };}[Test]public async Task TC_003_LowercaseIATACodes_ShouldReturn400(){var request = new{OriginDestCriteria = new[]{new{OriginDepCriteria = new { IATA_LocationCode = "lhr", Date = "2025-05-07" },DestArrivalCriteria = new { IATA_LocationCode = "jnb" }}}};var response = await _client.PostAsync("/AirShoppingRQ", new StringContent(JsonConvert.SerializeObject(request), Encoding.UTF8, "application/json"));Assert.AreEqual(HttpStatusCode.BadRequest, (int)response.StatusCode);}[TearDown]public void Teardown(){_client?.Dispose();}}

using NUnit.Framework;using System;using System.Net;using System.Net.Http;using System.Text;using System.Threading.Tasks;using Newtonsoft.Json;[TestFixture]public class AirShoppingTests{private HttpClient _client;[SetUp]public void Setup(){_client = new HttpClient { BaseAddress = new Uri("https://api.example.com") };}[Test]public async Task TC_004_InvalidIATALength_ShouldReturn400(){var request = new{OriginDestCriteria = new[]{new{OriginDepCriteria = new { IATA_LocationCode = "LH", Date = "2025-05-07" },DestArrivalCriteria = new { IATA_LocationCode = "JN" }}}};var response = await _client.PostAsync("/AirShoppingRQ", new StringContent(JsonConvert.SerializeObject(request), Encoding.UTF8, "application/json"));Assert.AreEqual(HttpStatusCode.BadRequest, (int)response.StatusCode);}[TearDown]public void Teardown(){_client?.Dispose();}}

using NUnit.Framework;using System;using System.Net;using System.Net.Http;using System.Text;using System.Threading.Tasks;using Newtonsoft.Json;[TestFixture]public class AirShoppingTests{private HttpClient _client;[SetUp]public void Setup(){_client = new HttpClient { BaseAddress = new Uri("https://api.example.com") };}[Test]public async Task TC_005_PastTravelDate_ShouldReturn400(){var request = new{OriginDestCriteria = new[]{new{OriginDepCriteria = new { IATA_LocationCode = "LHR", Date = "2023-01-01" },DestArrivalCriteria = new { IATA_LocationCode = "JNB" }}}};var response = await _client.PostAsync("/AirShoppingRQ", new StringContent(JsonConvert.SerializeObject(request), Encoding.UTF8, "application/json"));Assert.AreEqual(HttpStatusCode.BadRequest, (int)response.StatusCode);}[TearDown]public void Teardown(){_client?.Dispose();}}

using NUnit.Framework;using System;using System.Net;using System.Net.Http;using System.Text;using System.Threading.Tasks;using Newtonsoft.Json;[TestFixture]public class AirShoppingTests{private HttpClient _client;[SetUp]public void Setup(){_client = new HttpClient { BaseAddress = new Uri("https://api.example.com") };}[Test]public async Task TC_006_InvalidDateFormat_ShouldReturn400(){var request = new{OriginDestCriteria = new[]{new{OriginDepCriteria = new { IATA_LocationCode = "LHR", Date = "07-05-2025" },DestArrivalCriteria = new { IATA_LocationCode = "JNB" }}}};var response = await _client.PostAsync("/AirShoppingRQ", new StringContent(JsonConvert.SerializeObject(request), Encoding.UTF8, "application/json"));Assert.AreEqual(HttpStatusCode.BadRequest, (int)response.StatusCode);}[TearDown]public void Teardown(){_client?.Dispose();}}

using NUnit.Framework;using System;using System.Net;using System.Net.Http;using System.Text;using System.Threading.Tasks;using Newtonsoft.Json;[TestFixture]public class AirShoppingTests{private HttpClient _client;[SetUp]public void Setup(){_client = new HttpClient { BaseAddress = new Uri("https://api.example.com") };}[Test]public async Task TC_007_MissingCabinTypeCode_ShouldReturn400(){var request = new{OriginDestCriteria = new[]{new{OriginDepCriteria = new { IATA_LocationCode = "LHR", Date = "2025-05-07" },DestArrivalCriteria = new { IATA_LocationCode = "JNB" }}}};var response = await _client.PostAsync("/AirShoppingRQ", new StringContent(JsonConvert.SerializeObject(request), Encoding.UTF8, "application/json"));Assert.AreEqual(HttpStatusCode.BadRequest, (int)response.StatusCode);}[TearDown]public void Teardown(){_client?.Dispose();}}

using NUnit.Framework;using System;using System.Net;using System.Net.Http;using System.Text;using System.Threading.Tasks;using Newtonsoft.Json;[TestFixture]public class AirShoppingTests{private HttpClient _client;[SetUp]public void Setup(){_client = new HttpClient { BaseAddress = new Uri("https://api.example.com") };}[Test]public async Task TC_008_InvalidCabinTypeCode_ShouldReturn400(){var request = new{OriginDestCriteria = new[]{new{OriginDepCriteria = new { IATA_LocationCode = "LHR", Date = "2025-05-07" },DestArrivalCriteria = new { IATA_LocationCode = "JNB" }}},CabinType = new[]{new { CabinTypeCode = "99", PrefLevelCode = "Required" }}};var response = await _client.PostAsync("/AirShoppingRQ", new StringContent(JsonConvert.SerializeObject(request), Encoding.UTF8, "application/json"));Assert.AreEqual(HttpStatusCode.BadRequest, (int)response.StatusCode);}[TearDown]public void Teardown(){_client?.Dispose();}}

using NUnit.Framework;using System;using System.Net;using System.Net.Http;using System.Text;using System.Threading.Tasks;using Newtonsoft.Json;[TestFixture]public class AirShoppingTests{private HttpClient _client;[SetUp]public void Setup(){_client = new HttpClient { BaseAddress = new Uri("https://api.example.com") };}[Test]public async Task TC_009_SameOriginAndDestination_ShouldReturn400(){var request = new{OriginDestCriteria = new[]{new{OriginDepCriteria = new { IATA_LocationCode = "LHR", Date = "2025-05-07" },DestArrivalCriteria = new { IATA_LocationCode = "LHR" }}}};var response = await _client.PostAsync("/AirShoppingRQ", new StringContent(JsonConvert.SerializeObject(request), Encoding.UTF8, "application/json"));Assert.AreEqual(HttpStatusCode.BadRequest, (int)response.StatusCode);}[TearDown]public void Teardown(){_client?.Dispose();}}

using NUnit.Framework;using System;using System.Net;using System.Net.Http;using System.Text;using System.Threading.Tasks;using Newtonsoft.Json;[TestFixture]public class AirShoppingTests{private HttpClient _client;[SetUp]public void Setup(){_client = new HttpClient { BaseAddress = new Uri("https://api.example.com") };}[Test]public async Task TC_010_MissingOriginDepCriteria_ShouldReturn400(){var request = new{OriginDestCriteria = new[]{new{DestArrivalCriteria = new { IATA_LocationCode = "JNB" }}}};var response = await _client.PostAsync("/AirShoppingRQ", new StringContent(JsonConvert.SerializeObject(request), Encoding.UTF8, "application/json"));Assert.AreEqual(HttpStatusCode.BadRequest, (int)response.StatusCode);}[TearDown]public void Teardown(){_client?.Dispose();}}

using NUnit.Framework;using System;using System.Net;using System.Net.Http;using System.Text;using System.Threading.Tasks;using Newtonsoft.Json;[TestFixture]public class AirShoppingTests{private HttpClient _client;[SetUp]public void Setup(){_client = new HttpClient { BaseAddress = new Uri("https://api.example.com") };}[Test]public async Task TC_011_MissingDestArrivalCriteria_ShouldReturn400(){var request = new{OriginDestCriteria = new[]{new{OriginDepCriteria = new { IATA_LocationCode = "LHR", Date = "2025-05-07" }}}};var response = await _client.PostAsync("/AirShoppingRQ", new StringContent(JsonConvert.SerializeObject(request), Encoding.UTF8, "application/json"));Assert.AreEqual(HttpStatusCode.BadRequest, (int)response.StatusCode);}[TearDown]public void Teardown(){_client?.Dispose();}}

using NUnit.Framework;using System;using System.Net;using System.Net.Http;using System.Text;using System.Threading.Tasks;using Newtonsoft.Json;[TestFixture]public class AirShoppingTests{private HttpClient _client;[SetUp]public void Setup(){_client = new HttpClient { BaseAddress = new Uri("https://api.example.com") };}[Test]public async Task TC_012_ReturnDateBeforeDeparture_ShouldReturn400(){var request = new{OriginDestCriteria = new[]{new{OriginDepCriteria = new { IATA_LocationCode = "LHR", Date = "2025-05-14" },DestArrivalCriteria = new { IATA_LocationCode = "JNB" }},new{OriginDepCriteria = new { IATA_LocationCode = "JNB", Date = "2025-05-07" },DestArrivalCriteria = new { IATA_LocationCode = "LHR" }}}};var response = await _client.PostAsync("/AirShoppingRQ", new StringContent(JsonConvert.SerializeObject(request), Encoding.UTF8, "application/json"));Assert.AreEqual(HttpStatusCode.BadRequest, (int)response.StatusCode);}[TearDown]public void Teardown(){_client?.Dispose();}}

using NUnit.Framework;using System;using System.Net;using System.Net.Http;using System.Text;using System.Threading.Tasks;using Newtonsoft.Json;[TestFixture]public class AirShoppingTests{private HttpClient _client;[SetUp]public void Setup(){_client = new HttpClient { BaseAddress = new Uri("https://api.example.com") };}[Test]public async Task TC_013_NonExistentIATACodes_ShouldReturn200WithEmptyList(){var request = new{OriginDestCriteria = new[]{new{OriginDepCriteria = new { IATA_LocationCode = "XXX", Date = "2025-05-07" },DestArrivalCriteria = new { IATA_LocationCode = "YYY" }}}};var response = await _client.PostAsync("/AirShoppingRQ", new StringContent(JsonConvert.SerializeObject(request), Encoding.UTF8, "application/json"));Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);var content = await response.Content.ReadAsStringAsync();dynamic result = JsonConvert.DeserializeObject(content);Assert.AreEqual(0, result.FlightOffers.Count);}[TearDown]public void Teardown(){_client?.Dispose();}}

using NUnit.Framework;using System;using System.Net;using System.Net.Http;using System.Text;using System.Threading.Tasks;using Newtonsoft.Json;[TestFixture]public class AirShoppingTests{private HttpClient _client;[SetUp]public void Setup(){_client = new HttpClient { BaseAddress = new Uri("https://api.example.com") };}[Test]public async Task TC_014_MultipleCabinTypes_ShouldReturnFlightOffers(){var request = new{OriginDestCriteria = new[]{new{OriginDepCriteria = new { IATA_LocationCode = "LHR", Date = "2025-05-07" },DestArrivalCriteria = new { IATA_LocationCode = "JNB" }}},CabinType = new[]{new { CabinTypeCode = "5", PrefLevelCode = "Required" },new { CabinTypeCode = "6", PrefLevelCode = "Preferred" },new { CabinTypeCode = "7", PrefLevelCode = "Accepted" }}};var response = await _client.PostAsync("/AirShoppingRQ", new StringContent(JsonConvert.SerializeObject(request), Encoding.UTF8, "application/json"));Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);var content = await response.Content.ReadAsStringAsync();dynamic result = JsonConvert.DeserializeObject(content);Assert.IsTrue(result.FlightOffers.Count > 0);}[TearDown]public void Teardown(){_client?.Dispose();}}

using NUnit.Framework;using System;using System.Net;using System.Net.Http;using System.Text;using System.Threading.Tasks;using Newtonsoft.Json;[TestFixture]public class AirShoppingTests{private HttpClient _client;[SetUp]public void Setup(){_client = new HttpClient { BaseAddress = new Uri("https://api.example.com") };}[Test]public async Task TC_015_EmptyRequestBody_ShouldReturn400(){var response = await _client.PostAsync("/AirShoppingRQ", new StringContent("", Encoding.UTF8, "application/json"));Assert.AreEqual(HttpStatusCode.BadRequest, (int)response.StatusCode);}[TearDown]public void Teardown(){_client?.Dispose();}}